import requests


HUGGING_FACE_TOKEN = 'YOUR-KEY'


class AI:

    def __init__(self, level):
        self.level = level


    def _example(self):
        url = 'https://router.huggingface.co/v1/chat/completions'
        prompt = """
Составь алгебраический пример в соответствии с выбранным уровнем сложности (1–5), используя только числа, знаки +, -, *, /, скобки и, при необходимости, неизвестные (x, y, z). 
Каждый пример должен быть уникальным: скобки, логарифмы, корни, степени, неизвестные могут присутствовать или отсутствовать случайно.
Формат логарифмов: log(число, основание) с пробелом после запятой.
Уровень 1: одно действие, числа до 100, целые.
Уровень 2: до двух действий, числа до 999, целые, скобки не обязательны, но могут присутствовать.
Уровень 3: до трёх действий, числа до 20000, могут быть дроби (до 1 знаков после точки), отрицательные числа.
Уровень 4: до четырёх действий, числа до 100000, результат до 2 млн, могут быть дроби, отрицательные числа, корни, степени до 3, неизвестные могут присутствовать, скобки и логарифмы могут присутствовать или отсутствовать.
Уровень 5: до пяти действий, числа до ~500000, результат до 5 млн, дроби, отрицательные числа, степени до 10, корни, логарифмы, неизвестные могут присутствовать, скобки могут быть или отсутствовать, пример может быть одним действием, но сложным.
Результат должен быть человекочитаемой строкой, без слов и лишних символов.
Формат ответа: пример | правильный ответ
Пример: 26 + 32 | 58 или x * (383 + 87) = 7520 | 16
В ОТВЕТЕ через черточку ТОЛЬКО число. (необходимо выполнять этот параметр для корректного преобразования ответа в формат float в коде в Python)
"""
        negative_prompt = negative_prompt = """
Не использовать слова, вопросы, физические задачи, описательные тексты или истории.
Не включать двоеточия, скобки не по правилам, лишние символы, символ процента %.
Не использовать неверный формат логарифмов, дробей или степеней.
Не давать более одного правильного ответа.
Не включать примеры с миллиардами или слишком длинные выражения (>5 действий).
Не использовать неизвестные на уровнях ниже 4.
Не включать лишние символы, которые не читаются человеком (например, #, @, &, ~).
Не использовать слова вместо чисел или действий.
Формат всегда: пример | правильный ответ
Строгое правило: не добавлять текста, описаний, пояснений или комментариев. 
Вывод должен быть только одной строкой в формате 'пример | правильный ответ'. 
Если есть неизвестные (x, y, z), пример остаётся одной строкой, а ответ через палку, например: 'x + 5 = 12 | x = 7'.
Никаких слов 'правильный ответ', 'решение', 'пример' или других пояснений.
Никаких многстрочных блоков, только один пример и один ответ.
При сложных примерах не надо писать x = число. Нужно просто выводить число.
"""
        verification_instruction = """
ВАЖНО: СРАЗУ ПОСЛЕ ФОРМИРОВАНИЯ ПРИМЕРА ВЫПОЛНИ ВНУТРЕННУЮ ПРОВЕРКУ И ВЕРНИ ТОЛЬКО КОРРЕКТНЫЙ ВЫВОД.

1) Вычисли правильный ответ точно (символы log(число, основание), sqrt(), cbrt(), ^ для степеней интерпретировать математически).
2) Если есть неизвестные (x, y, z) — реши уравнение algebraically и получи единственное числовое значение для каждой неизвестной.
3) Подставь полученный ответ(ы) обратно в выражение и проверь равенство численно. Разность (абсолютная) должна быть <= 0.001.
4) Для дробей округляй числовой ответ до 3 знаков после точки. Для целых — оставь целым.
5) Если результат содержит дробь, представь её через точку (например, 3.125).
6) Если проверка не проходит — пересгенерируй пример и повтори проверку (максимум 3 попытки).
7) Если после 3 попыток не удалось сгенерировать корректный пример — выдать безопасный резервный пример: "1 + 1 | 2".
8) НИКАКИХ ПОЯСНЕНИЙ, НИКАКИХ ШАГОВ, НИКАКИХ СЛОВ — ТОЛЬКО ОДНА СТРОКА: пример | правильный ответ.

Точность и валидация обязательны. Любые примеры, дающие неверный ответ, недопустимы.
"""

        headers = {'Authorization': f'Bearer {HUGGING_FACE_TOKEN}'}
        payload = {
            'messages': [
                {
                    'role': 'user',
                    'content': (f'Есть выбранный пользователем уровень {self.level}, где 1 - минимальный, 5 - максимальный'
                                f'Необходимо составить пример согласно выбранному уровню, выполняя следующий промт: {prompt}, также негативный промт: {negative_prompt}'
                                f'Вывести составленный пример необходимо в формате человекочитаемой строки, далее символ "|", далее человекочитаемый корректный ответ на приме, как в инструкциях'
                                f'Учти, что корректность ответа также ВАЖНА! Следуй прописанным инструкциям: {verification_instruction}'
                    )
                }
            ],
            'model': 'deepseek-ai/DeepSeek-V3-0324'
        }
        response = requests.post(url, headers=headers, json=payload)
        return response.json()['choices'][0]['message']['content']